{"note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"Sass grid framework 100% fluid, semantic, clean and allowing infinte nesting level with the use of one single mixin.","body":"# Zass\r\n\r\n**One mixin to rule them all**\r\n\r\nZass is a [Sass](http://sass-lang.com/ \"Sass homepage\") (CSS) fluid grid framework. Zass is 100% fluid, semantic, clean and allow infinite nesting of columns with the use of a single mixin.\r\n\r\n* 100% fluid because it only uses percentage units to create grid dimensions.\r\n* Semantic, because thanks to Sass CSS pre-processor there is no need to pollute HTML with design named classes (as `.col_4` to indicate 4 grid units width).\r\n* Clean because it does not use any CSS hack neither uggly negative margins. Zass does not care about obsolete browsers like Internet Explorer 6.\r\n* Zass can nest infinite levels of columns.\r\n* And, what is more awesome, Zass can do all of this using one single mixin.\r\n\r\n## Setup\r\nZass framework requires you are working with [Sass](http://sass-lang.com/ \"Sass homepage\").\r\n\r\nWith git, to get latest stable version:\r\n\r\n    git clone https://github.com/laMarciana/zass.git\r\n\r\nOtherwise, download it from:\r\n\r\n    https://github.com/laMarciana/zass/zipball/master\r\n\r\nMove zass files to your sass directory and import `sass/_zass.scss` from your sass stylesheet:\r\n\r\n    @import 'sass/zass';\r\n\r\n## How does it work?\r\nFirst of all, you have to configure your grid through three variables. Here it is an example for a 960px grid:\r\n\r\n    $zass-column-width: 60px; //Grid columns width\r\n    $zass-gutter-width: 20px; //Grid gutters width\r\n    $zass-grid-units: 12; //Grid number of columns\r\n\r\nThen, you are ready to start creating and nesting as many columns as you want using the `zass-column()` mixin:\r\n\r\n    zass-column($n, $parent-n, $position, $push, $pull);\r\n\r\nHere it is an explanation of `zass-column` parameters:\r\n\r\n* `$n`: amount of grid units that the column will take up.\r\n* `$parent-n`: Only for nested columns, amount of grid units that the parent column takes up. 0 means it is not a nested column. `0 ` is the default.\r\n* `$position`: Only for nested columns, it can be `left`, `right` or `inner` if a column is the left extreme one, the right extreme one or an inner one. `inner` by default.\r\n* `$push`: Amount of grid units to push (left margin) the column\r\n* `$pull`: Amount of grid units to pull (right margin) the column\r\n\r\nSo, let say you have following DOM structure:\r\n\r\n    <div id=\"col1\">\r\n      <p>Column 1</p>\r\n    </div>\r\n\r\n    <div id=\"col2\">\r\n      <div id=\"col2-1\">\r\n        <p>Column 2-1</p>\r\n      </div>\r\n      <div id=\"col2-2\">\r\n       <p>Column 2-2</p>\r\n      </div>\r\n     </div>\r\n\r\n     <div id=\"col3\">\r\n       <p>Column 3</p>\r\n     </div>\r\n\r\nWith Zass, you could build quickly a grid layout:\r\n\r\n    @import '../../zass';\r\n\r\n    $zass-column-width: 60px;\r\n    $zass-gutter-width: 20px;\r\n    $zass-grid-units: 12;\r\n\r\n    #col1 {\r\n       @include zass-column(3); //Take up three grid units\r\n    }\r\n\r\n    #col2 {\r\n       @include zass-column(7); //Take up seven grid units\r\n       #col2-1 {\r\n          @include zass-column(4, 7, 'left'); //Take up 4 grid units inside #col2. It's the left one.\r\n       }\r\n       #col2-2 {\r\n          @include zass-column(3, 7, 'right'); //Take up 3 grid units inside #col2. It's the right one.\r\n       }\r\n    }\r\n\r\n    #col3 {\r\n       @include zass-column(1, $push: 1); //Take up one grid unit and push one more.\r\n    }\r\n\r\nOptionally, you can use a second mixin, `zass-grid()`, if you want to set grid width as the maximum width for a given container. That way, a perfect pixel photo of a design is achieved for resolutions greater or equal than grid pixel width while it is still 100% fluid for lower resolutions:\r\n\r\n    zass-grid($em, $rfs)\r\n\r\n* `$em`: If true, set that maximum width in em. In that case, the grid will increase its width if user increases text zoom level. Defaults to `true`.\r\n* `$rfs`: Relevant font size to calculate maximum width in em units. Default to `16px`.\r\n\r\nIn our example:\r\n\r\n    #wrapper {\r\n      @include zass-grid(true, 16px); //It ouputs \"max-width: 60em;\" \r\n    }\r\n\r\nor\r\n\r\n    #wrapper {\r\n      @include zass-grid(false); //Will ouput \"max-width: 960px;\"\r\n    }\r\n\r\n## More examples\r\n\r\nLook at the `examples/` directory for more examples.\r\n\r\n## Reference\r\n\r\nVariables, functions and mixins are fully documented in the source code.\r\n\r\n## Contact & Copyright\r\n\r\nCopyright 2012, Marc Busqué Pérez, under GNU LESSER GENERAL PUBLIC LICENSE\r\nmarc@lamarciana.com - http://www.lamarciana.com\r\n\r\n___\r\n\r\nIf you want more control with your grid layout, you can check [fluidizer](http://lamarciana.github.com/fluidizer/)\r\n","name":"Zass","google":"UA-33127155-1"}