$zass-column-width: 60px !default;
$zass-gutter-width: 20px !default;
$zass-columns: 12 !default;

@mixin zass-set-grid-max-width($em: true, $rfs: 16px) {
   $max-width: _zass-grid-width() - $zass-gutter-width;
   $padding: 0.5 * $zass-gutter-width;
   @if ($em) {
      $max-width: ($max-width / $rfs) * 1em;
      $padding: ($padding / $rfs) * 1em;
   }
   max-width: $max-width;
   padding-left: $padding;
   padding-right: $padding;
}

//Returns grid width in pixels
//
//@return px grid width in pixels
@function _zass-grid-width() {
   @return ($zass-column-width + $zass-gutter-width) * $zass-columns;
}

//Display the rules to create a fluid zass column. This is a column that will spread as many columns as told, having half a gutter margin in each side
//
//@param int $n number of columns to spread
//@param int $push number of columns to be manually added to the left margin
//@param int $pull number of columns to be manually added to the right margin
@mixin zass-column($n, $position: 'inner', $parent-n: 0, $push: 0, $pull: 0) {
   $cbw: false;
   @if ($parent-n == 0) {
      $cbw: _zass-grid-width() - $zass-gutter-width;
   } @else {
      $cbw: ($parent-n * ($zass-column-width + $zass-gutter-width)) - $zass-gutter-width;
   }
   width: _zass-column-width($n, $cbw);
   @if ($position == 'left') {
      margin-left: _zass-column-margin($cbw, $push, true)
   } @else {
      margin-left: _zass-column-margin($cbw, $push, false)
   }
   @if ($position == 'right') {
      margin-right: _zass-column-margin($cbw, $pull, true)
   } @else {
      margin-right: _zass-column-margin($cbw, $pull, false)
   }
   @include _zass-columnize();
}

//Return the width value in percentage when creating a zass column
//
//@param int $n number of columns the zass column will spread
//@param px $cbw containing block width in pixels, used to referenciate the percentage to calculate
//
//@return int(%) width value in percentage
@function _zass-column-width($n, $cbw) {
   @return (((($zass-gutter-width + $zass-column-width) * $n) - $zass-gutter-width) / $cbw) * 100%;
}

//Return a margin value in percentage when creating a zass column
//
//@param float $gutter-percentage The percentage of gutter width to be included in the margin. Usually 0.5 or 1 if it's the extrem side of an extrem column
//@param px $cbw containing block width in pixels, used to referenciate the percentage to calculate
//@param int $jump number of columns to be manually added to the margin
//
//@return % margin value in percentage
@function _zass-column-margin($cbw, $jump, $extrem-side: false) {
   $margin: $jump * ($zass-column-width + $zass-gutter-width);
   @if ($extrem-side == false) {
      $margin: $margin + (0.5 * $zass-gutter-width);
   }
   @return ($margin / $cbw) * 100%;
}

@mixin _zass-columnize() {
   float: left;
}
